#!/usr/bin/env python3

"""pylunarvim

    You can set your python files for running them without the need of setting
    them everytime you need to

    This script allows to write an empty file with the python shebang on it:
    #!/usr/bin/env python3 line, and gives execute permissions for you to be
    able to run it. Then you can run your python file like this: foo. Without
    the .py extension and without the prefix ./ to be able to run it. All by
    setting the --setworkplace command line argument.

    This script needs you to pass a file name. Like this: script.py or script.
    Works with both. And should be used like this: pylunarvim --file script.
    Alternatively you can add an alias in bashrc or zshrc, depending on your
    Linux "shell" (bash or zsh), like this:
        alias lp='lvimpy --file'. So you can use this way: lp script

    You don't need to install any modules for this script to work.
"""

import argparse
from argparse import Namespace
import os
import stat
from pathlib import Path
import subprocess
import sys
from Settings import Settings


shebang = "#!/usr/bin/env python3"


def check_shebang(file_path: str) -> bool:
    """Gets file path and checks shebang on the first line in file

    :param file_doc: The path for for the file to check
    :type file_path: str
    :returns: True if shebang on target file, otherwise False
    :rtype: bool
    """

    try:
        with open(file_path, "r") as file:
            line = file.readline()
            if line == shebang:
                return True
    except IsADirectoryError as dir:
        file_path_list = file_path.split("/")
        file = file_path_list[-1]
        print(f"{file}: {dir.strerror}")

    return False


def edit(file: str) -> None:
    """Enters editor on file location read from file
    argument

    :param file: file path
    :type file: str
    :returns: No return
    :rtype: None
    """

    path = Path(file)
    if not path.is_dir():
        subprocess.run(["lvim", file])


def rename(file_path: str) -> None:
    """Gets file path to get the file to rename

    :param file_path: The path for the file to rename
    :type file_path: str
    :returns: No return
    :rtype: None
    """

    if file_path.endswith(".py"):
        current_file_path = file_path
        new_file_path = Path(current_file_path).with_suffix('')  # cuts out .py
        subprocess.run(["mv", current_file_path, str(new_file_path)])


def get_arguments() -> Namespace:
    """Gets arguments from cli

    :param: no
    :type:
    :returns: returns Namespace class object with arguments from cli
    :rtype: str
    """

    parser = argparse.ArgumentParser(
        prog="pylunarvim",
        description=(
            "Brief description of the tool.\n"
            "This program do verious settings on file and environment "
            "so you can run your python scripts without setting them "
            "you create a script.\n"
            f"{__name__.__doc__}"),
        epilog="Thanks for using %(prog)s! :)")

    parser.add_argument('--getworkplace', nargs='?', const=True,
                        type=bool, default=True)

    parser.add_argument('--setworkplace', nargs='?',
                        type=str, default="")

    parser.add_argument("--file", type=str)

    args: Namespace = parser.parse_args()

    #if not args.file:
    #    print("Usage: pylunarvim --file <file>.\n"
    #          "pylunarvim -h for more help.")
    #    parser.exit(1)

    return args


def give_permissions(python_file: bool, file_path: str) -> None:
    """If it's a python file, then gives exec flags on file for the user that
    creates it

    :param python_file: Flag to know if it's a python file
    :type python_file: bool
    :param file_path: File path for the file to change its exec mode
    :type file_path: str
    :returns: No return
    :rtype: None
    """

    if python_file and file_path:
        os.chmod(file_path, stat.S_IXUSR | stat.S_IRUSR | stat.S_IRWXU)


def touch(file_path: str) -> None:
    """Gets file path and touches it. If the does not exist, it creates it

    :param ile_path: File path for the file to create or touch
    :type file_path: str
    :returns: No return
    :rtype: None
    """

    Path(file_path).touch()


def shebang_write(file_path: str) -> None:
    """Gets file path, searches it for the files at the end of the path and
    writes a sheband in it

    :param file_path: File path for the file to open for writing shebang
    :type file_path: str
    :returns: No return
    :rtype: None
    """

    if os.stat(file_path).st_size == 0:
        with open(file_path, "w+") as file:
            file.write(shebang)


def main() -> None:
    """Executes all the processes to acomplish the task of creating a file with
    a shenbang on it and give execution permissions to file's owner

    :param:
    :type:
    :returns: No return
    :rtype: None
    """

    args: Namespace = get_arguments()

    settings = Settings()
    settings.display_work_place(args.getworkplace)

    if not settings.check_work_place(args.getworkplace):
        sys.exit(1)
    else:
        settings.set_work_place(args.setworkplace)
        work_place = settings.get_work_place_settings()

        file_path = work_place + args.file

        touch(file_path)
        shebang_write(file_path)
        line_there: bool = check_shebang(file_path)
        give_permissions(line_there, file_path)
        rename(file_path)
        edit(file_path)


if __name__ == "__main__":
    main()
